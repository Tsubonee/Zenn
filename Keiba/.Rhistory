# install.packages("rvest")
# install.packages("httr")
# install.packages("dplyr")
# install.packages("readr")
# install.packages("RSelenium")
library(rvest)
library(httr) #mozi bake
library(dplyr)
library(readr)
library(RSelenium)
library(data.table)
library(writexl)
url <- "https://db.netkeiba.com/race/202408050611/"  # 2024 菊花賞
html <- read_html(url, encoding = "euc-jp")
Sys.sleep(1) #アクセス不可軽減
tbl <- html_element(html, css = "#contents_liquid > table") #copy selector
df <- html_table(tbl)
fwrite(df, "kikka_2024_results.csv", row.names = FALSE, bom = TRUE)
write_xlsx(df, "kikka_2024_results.xlsx")
# List of URLs for the 菊花賞 (2019 to 2024)
years <- 2019:2024
base_url <- "https://db.netkeiba.com/race/"
race_ids <- c("201908040711", "202008040611", "202109040611", "202209040711", "202308020711", "202408050611")
urls <- paste0(base_url, race_ids, "/")
all_data <- list()
for (i in seq_along(urls)) {
url <- urls[i]
year <- years[i]
html <- read_html(url, encoding = "euc-jp")
Sys.sleep(1) # Load reduction for access
tbl <- html_element(html, css = "#contents_liquid > table") # selector
df <- html_table(tbl, fill = TRUE)
df$Year <- year
all_data[[i]] <- df
}
# combined data
final_data <- bind_rows(all_data)
# save csv file
fwrite(final_data, "kikka_2019_2024_results.csv", row.names = FALSE, bom = TRUE)
# save excel file
write_xlsx(final_data, "kikka_2019_2024_results.xlsx")
data <- read.csv(./kikka_2019_2024_results.csv)
data <- read.csv(.\kikka_2019_2024_results.csv)
data <- read.csv(".\kikka_2019_2024_results.csv")
path <- ".\kikka_2019_2024_results.csv"
path <- "./kikka_2019_2024_results.csv"
data <- read.csv(path, na = "")
path <- "./kikka_2019_2024_results.csv"
data <- read.csv(path, na = "")
data.head()
path <- "./kikka_2019_2024_results.csv"
data <- read.csv(path, na = "")
head(data)
df$馬体重数値 <- gsub("\\(.*\\)", "", df$馬体重)
df$馬体重数値 <- as.numeric(df$馬体重数値)
# 着順の数値化
df <- df %>%
mutate(着順数値 = as.numeric(着順))
# 3. 欠損値を除去
df_clean <- df %>%
filter(!is.na(馬体重数値), !is.na(着順数値))
# 4. 正規性の検定
shapiro.test(df_clean$馬体重数値)
shapiro.test(df_clean$着順数値)
# 5. 相関分析
cor_result <- cor.test(df_clean$馬体重数値, df_clean$着順数値, method = "spearman")
print(cor_result)
# 6. 可視化
ggplot(df_clean, aes(x = 馬体重数値, y = 着順数値)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "馬体重と着順の関係", x = "馬体重 (kg)", y = "着順")
# install.packages("rvest")
# install.packages("httr")
# install.packages("dplyr")
# install.packages("readr")
# install.packages("RSelenium")
library(rvest)
library(httr) #mozi bake
library(dplyr)
library(readr)
library(RSelenium)
library(data.table)
library(writexl)
library(ggplot2)
# 着順の数値化
df <- df %>%
mutate(着順数値 = as.numeric(着順))
# 3. 欠損値を除去
df_clean <- df %>%
filter(!is.na(馬体重数値), !is.na(着順数値))
# 4. 正規性の検定
shapiro.test(df_clean$馬体重数値)
shapiro.test(df_clean$着順数値)
# 5. 相関分析
cor_result <- cor.test(df_clean$馬体重数値, df_clean$着順数値, method = "spearman")
print(cor_result)
# 6. 可視化
ggplot(df_clean, aes(x = 馬体重数値, y = 着順数値)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "馬体重と着順の関係", x = "馬体重 (kg)", y = "着順")
# ヒストグラム
ggplot(df_clean, aes(x = 馬体重数値)) +
geom_histogram(binwidth = 10, fill = "blue", alpha = 0.7) +
labs(title = "馬体重のヒストグラム", x = "馬体重 (kg)", y = "頻度") +
theme_minimal()
# QQプロット
qqnorm(df_clean$馬体重数値, main = "馬体重のQQプロット")
qqline(df_clean$馬体重数値, col = "red")
# 着順数値
shapiro.test(df_clean$着順数値) # Shapiro-Wilk検定
# ヒストグラム
ggplot(df_clean, aes(x = 着順数値)) +
geom_histogram(binwidth = 1, fill = "green", alpha = 0.7) +
labs(title = "着順のヒストグラム", x = "着順", y = "頻度") +
theme_minimal()
# QQプロット
qqnorm(df_clean$着順数値, main = "着順のQQプロット")
qqline(df_clean$着順数値, col = "red")
View(df)
View(data)
version
RStudio.Version()
